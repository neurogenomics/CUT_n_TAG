peaks_dir <- "processed_data/HK5M2BBXY/bwa/mergedReplicate/macs/narrowPeak"
CT_summits <- data.table::fread(file.path(root.dir,peaks_dir,"control.mRp.clN_summits.bed"))
CT_summits
gr.dat
CT_summits <- data.table::fread(file.path(root.dir,peaks_dir,"control.mRp.clN_summits.bed"),
col.names = c("seqnames","start","end","peak_id","score"))
CT_summits
CT_summits <- data.table::fread(file.path(root.dir,peaks_dir,"control.mRp.clN_summits.bed"),
col.names = c("seqnames","start","end","peak_id","score")) %>%
GenomicRanges::makeGRangesFromDataFrame()
CT_summits
CT_summits <- data.table::fread(file.path(root.dir,peaks_dir,"control.mRp.clN_summits.bed"),
col.names = c("seqnames","start","end","peak_id","score")) %>%
GenomicRanges::makeGRangesFromDataFrame(keep.extra.columns = T)
CT_summits
CT_summits
CT_summits <- data.table::fread(file.path(root.dir,peaks_dir,"control.mRp.clN_summits.bed"),
col.names = c("seqnames","start","end","peak_id","summit")) %>%
GenomicRanges::makeGRangesFromDataFrame(keep.extra.columns = T)
CT_summits <- data.table::fread(file.path(root.dir,peaks_dir,"control.mRp.clN_summits.bed"),
col.names = c("seqnames","start","end","peak_id","summit_height")) %>%
GenomicRanges::makeGRangesFromDataFrame(keep.extra.columns = T)
CT_narrowPeaks <- data.table::fread(file.path(root.dir,peaks_dir,"control.mRp.clN_peaks.narrowPeak"))#,
CT_narrowPeaks
CT_narrowPeaks <- data.table::fread(file.path(root.dir,peaks_dir,"control.mRp.clN_peaks.annotatePeaks.txt"))#,
CT_narrowPeaks
CT_narrowPeaks <- data.table::fread(file.path(root.dir,peaks_dir,"control.mRp.clN_peaks.annotatePeaks.txt")) %>%
GenomicRanges::makeGRangesFromDataFrame(seqnames.field = "Chr",
start.field = "Start", end.field = "End",strand.field = "Strand",
keep.extra.columns = T)
CT_narrowPeaks
root.dir <- "/rds/general/project/neurogenomics-lab/live/GitRepos/CUT_n_TAG"
knitr::opts_chunk$set(echo = T, root.dir = root.dir)
knitr::opts_knit$set(
root.dir = root.dir
)
setwd(root.dir)
# source(file.path(root.dir,"scripts/functions.R"))
library(dplyr)
library(ggbio) # BiocManager::install("ggbio")
peaks_dir <- "processed_data/HK5M2BBXY/bwa/mergedReplicate/macs/narrowPeak"
CT_narrowPeaks <- data.table::fread(file.path(root.dir,peaks_dir,"control.mRp.clN_peaks.annotatePeaks.txt")) %>%
GenomicRanges::makeGRangesFromDataFrame(seqnames.field = "Chr",
start.field = "Start", end.field = "End",strand.field = "Strand",
keep.extra.columns = T)
CT_summits <- data.table::fread(file.path(root.dir,peaks_dir,"control.mRp.clN_summits.bed"),
col.names = c("seqnames","start","end","peak_id","summit_height")) %>%
GenomicRanges::makeGRangesFromDataFrame(keep.extra.columns = T)
CT_summits\
bw.filt
CT_narrowPeaks
CT_narrowPeaks
ggbio::autoplot(CT_narrowPeaks,
geom="rect",
# adjust=.2,
binwidth=300
)
,
CT_narrowPeaks_filt <- GenomicRanges::findOverlaps(query = gr.dat, subject = CT_narrowPeaks)
CT_narrowPeaks_filt
hits <- GenomicRanges::findOverlaps(query = gr.dat, subject = CT_narrowPeaks)
CT_narrowPeaks_filt <- CT_narrowPeaks[subjectHits(hits)]
CT_narrowPeaks_filt <- CT_narrowPeaks[S4Vectors::subjectHits(hits)]
CT_narrowPeaks_filt
ggbio::autoplot(CT_narrowPeaks_filt,
geom="rect"
)
ggbio::autoplot(CT_narrowPeaks_filt,
geom="rect",
alpha=.5,
aes_string(label="Annotation", fill="Peak Score")
)
ggbio::autoplot(CT_narrowPeaks_filt,
geom="rect",
alpha=.5,
aes_string(label="Annotation", fill="Peak Score")
)
colnames(CT_narrowPeaks_filt)
ggbio::autoplot(CT_narrowPeaks_filt,
geom="rect",
alpha=.5,
aes(label=Annotation, fill=`Peak Score`)
)
ggbio::autoplot(CT_narrowPeaks_filt,
geom="rect",
alpha=.5,
aes(label=Annotation)
)
ggbio::geom_rect(CT_narrowPeaks_filt,
geom="rect", stat="identity",
alpha=.5,
aes(label=Annotation)
)
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
# aes(y=y, fill = Element),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0)
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
aes(y=1, fill = Element),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0)
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
aes(y=`Peak Score`, fill = Element),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0)
ggbio::ggbio() +
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
aes(y=`Peak Score`, fill = Element),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0)
ggbio::ggbio(data = CT_narrowPeaks_filt) +
ggbio::geom_rect(
stat="identity",
aes(y=`Peak Score`, fill = Element),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0)
ggbio::ggbio(data = CT_narrowPeaks_filt) +
ggbio::geom_rect(
stat="identity",
aes(y="Peak Score", fill = Element),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0)
ggbio::ggbio(data = CT_narrowPeaks_filt,  aes(y=`Peak Score`)) +
ggbio::geom_rect( stat="identity",
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0)
ggbio::ggbio() +
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
aes(y=`Peak Score`),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0)
CT_narrowPeaks <- data.table::fread(file.path(root.dir,peaks_dir,"control.mRp.clN_peaks.annotatePeaks.txt")) %>%
dplyr::mutate(peak_score="Peak Score") %>%
GenomicRanges::makeGRangesFromDataFrame(seqnames.field = "Chr",
start.field = "Start", end.field = "End",strand.field = "Strand",
keep.extra.columns = T)
CT_narrowPeaks$peak_score
CT_narrowPeaks <- data.table::fread(file.path(root.dir,peaks_dir,"control.mRp.clN_peaks.annotatePeaks.txt")) %>%
dplyr::mutate(peak_score=`Peak Score`) %>%
GenomicRanges::makeGRangesFromDataFrame(seqnames.field = "Chr",
start.field = "Start", end.field = "End",strand.field = "Strand",
keep.extra.columns = T)
CT_narrowPeaks$peak_score
CT_narrowPeaks <- data.table::fread(file.path(root.dir,peaks_dir,"control.mRp.clN_peaks.annotatePeaks.txt")) %>%
dplyr::mutate(peak_score=`Peak Score`) %>%
GenomicRanges::makeGRangesFromDataFrame(seqnames.field = "Chr",
start.field = "Start", end.field = "End",strand.field = "Strand",
keep.extra.columns = T)
hits <- GenomicRanges::findOverlaps(query = gr.dat, subject = CT_narrowPeaks)
CT_narrowPeaks_filt <- CT_narrowPeaks[S4Vectors::subjectHits(hits)]
ggbio::ggbio() +
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
aes(y=`Peak Score`),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0)
ggbio::ggbio() +
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
aes(y=peak_score),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0)
gg_hist <- ggbio::autoplot(bw.filt,
geom="histogram",
# adjust=.2,
binwidth=300
)
max_height <- PLOT.get_max_histogram_height(gg=gg_hist)
max_height
CT_narrowPeaks_filt$y <- max_height
ggbio::ggbio() +
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
aes(y=max_height, fill=peak_score),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0)
ggbio::ggbio() +
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
aes(y=y, fill=peak_score),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0)
rect_height <- max_height / if(geom=="density") 8 else 10
geom <- "histogram"
rect_height <- max_height / if(geom=="density") 8 else 10
CT_narrowPeaks_filt$y <- 0 - rect_height
CT_narrowPeaks_filt
ggbio::ggbio() +
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
rect.height= rect_height,
aes(y=y, fill=peak_score),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0)
gg_hist +
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
rect.height= rect_height,
aes(y=y, fill=peak_score),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0)
CT_narrowPeaks_filt
bw.filt
gg <- gg_hist +
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
rect.height= rect_height,
aes(y=y, fill=peak_score, label=Annotation),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0)
gg
rect_height
bw.filt
gg_hist <- ggbio::autoplot(bw.filt,
geom="histogram",
aes(fill=score, color=score),
# adjust=.2,
binwidth=300
)
gg_hist
bw.filt$score
gg_hist <- ggbio::autoplot(bw.filt,
geom="histogram",
aes(fill=score),
# adjust=.2,
binwidth=300
) +
theme_classic()
gg_hist
str(gg_hist)
gg <- gg_hist +
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
rect.height= rect_height,
aes(y=y, fill=peak_score, label=Annotation),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0) +
theme_classic() +
ggbio::zoom_in(fac = 1/10)
gg
gg <- gg_hist +
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
rect.height= rect_height,
aes(y=y, fill=peak_score, label=Annotation),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0) +
theme_classic() +
ggbio::zoom_in(fac = 1/10) +
ggbio::scale_x_sequnit(unit = "Mb")
gg
gg_hist <- ggbio::autoplot(bw.filt,
geom="histogram",
aes(fill=score)
# adjust=.2,
# binwidth=300
) +
theme_classic()
max_height <- echolocatoR::PLOT.get_max_histogram_height(gg=gg_hist)
CT_narrowPeaks_filt$y <- 0 - rect_height
gg <- gg_hist +
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
rect.height= rect_height,
aes(y=y, fill=peak_score, label=Annotation),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0) +
theme_classic() +
ggbio::zoom_in(fac = 1/10) +
ggbio::scale_x_sequnit(unit = "Mb")
gg
gg_hist <- ggbio::autoplot(bw.filt,
geom="histogram",
aes(fill=score),
# adjust=.2,
binwidth=1000
) +
theme_classic()
max_height <- echolocatoR::PLOT.get_max_histogram_height(gg=gg_hist)
max_height
rect_height <- max_height / if(geom=="density") 8 else 10
CT_narrowPeaks_filt$y <- 0 - rect_height
rect_height
gg <- gg_hist +
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
rect.height= rect_height,
aes(y=y, fill=peak_score, label=Annotation),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0) +
theme_classic() +
ggbio::zoom_in(fac = 1/10) +
ggbio::scale_x_sequnit(unit = "Mb")
gg
gg <- gg_hist +
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
rect.height= rect_height,
aes(y=y, fill=peak_score, label=Annotation),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=0) +
theme_classic() +
ggbio::zoom_in(fac = 1/20) +
ggbio::scale_x_sequnit(unit = "Mb")
gg
gg <- gg_hist +
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
rect.height= rect_height,
aes(y=y, fill=peak_score, label=Annotation),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=1) +
theme_classic() +
ggbio::zoom_in(fac = 1/20) +
ggbio::scale_x_sequnit(unit = "Mb")
gg
geom <- "density"
gg_hist <- ggbio::autoplot(bw.filt,
geom=geom,
aes(fill=score),
# adjust=.2,
binwidth=1000
) +
theme_classic()
max_height <- echolocatoR::PLOT.get_max_histogram_height(gg=gg_hist)
rect_height <- max_height / if(geom=="density") 8 else 10
CT_narrowPeaks_filt$y <- 0 - rect_height
gg <- gg_hist +
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
rect.height= rect_height,
aes(y=y, fill=peak_score, label=Annotation),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=1) +
theme_classic() +
ggbio::zoom_in(fac = 1/20) +
ggbio::scale_x_sequnit(unit = "Mb")
gg
gg_hist <- ggbio::autoplot(bw.filt,
geom=geom,
aes(fill=score),
adjust=.2,
binwidth=1000
) +
theme_classic()
max_height <- echolocatoR::PLOT.get_max_histogram_height(gg=gg_hist)
rect_height <- max_height / if(geom=="density") 8 else 10
CT_narrowPeaks_filt$y <- 0 - rect_height
gg <- gg_hist +
ggbio::geom_rect(CT_narrowPeaks_filt,
stat="identity",
rect.height= rect_height,
aes(y=y, fill=peak_score, label=Annotation),
alpha = .7, inherit.aes = F,
color="transparent",
hjust=1) +
theme_classic() +
ggbio::zoom_in(fac = 1/20) +
ggbio::scale_x_sequnit(unit = "Mb")
gg
geom <- "histogram"
gg_hist <- ggbio::autoplot(bw.filt,
geom=geom,
aes(fill=score),
adjust=.2,
binwidth=1000
) +
theme_classic()
max_height <- echolocatoR::PLOT.get_max_histogram_height(gg=gg_hist)
max_height <- echolocatoR::PLOT.get_max_histogram_height(gg=gg_hist)
rect_height <- max_height / if(geom=="density") 8 else 10
CT_narrowPeaks
GenomicRanges::width(x = CT_narrowPeaks)
CT_narrowPeaks$width <- GenomicRanges::width(CT_narrowPeaks)
CT_summits
CT_summits$width <- GenomicRanges::width(CT_summits)
CT_summits
mean(CT_narrowPeaks$width)
summary(mean(CT_narrowPeaks$width))
summary(CT_narrowPeaks$width)
summary(CT_summits$width)
2
encode.bw_filt <- echolocatoR::import.bw.filt(bw.file = "http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneK562H3k27acStdSig.bigWig",
gr.dat = gr.dat)
# Switch seqnames style to UCSC
gr.dat_ucsc <- suppressWarnings(GenomeInfoDb::seqlevelsStyle(gr.dat) <- "UCSC")
encode.bw_filt <- echolocatoR::import.bw.filt(bw.file = "http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneK562H3k27acStdSig.bigWig",
gr.dat = gr.dat_ucsc)
gr.dat_ucsc
# Switch seqnames style to UCSC
suppressWarnings(GenomeInfoDb::seqlevelsStyle(gr.dat) <- "UCSC")
encode.bw_filt <- echolocatoR::import.bw.filt(bw.file = "http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneK562H3k27acStdSig.bigWig",
gr.dat = gr.dat)
encode.bw_filt
ENCODE_breadPeaks <- data.tabe::fread("http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneK562H3k27acStdPk.broadPeak.gz", nThread=4)
ENCODE_breadPeaks <- data.table::fread("http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneK562H3k27acStdPk.broadPeak.gz", nThread=4)
ENCODE_breadPeaks
ENCODE_broadPeaks <- data.table::fread("http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneK562H3k27acStdPk.broadPeak.gz", nThread=4,
col.names = c("seqnames","start","end","name","score",
"strand","signalValue","neglog_pValue","neglog_qValue")) %>%
GenomicRanges::makeGRangesFromDataFrame(keep.extra.columns = T)
ENCODE_broadPeaks
encode.bw_filt <- echolocatoR::import.bw.filt(bw.file = "http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneK562H3k27acStdSig.bigWig",
gr.dat = ENCODE_broadPeaks)
encode.bw_filt
CT.bw_filt <- echolocatoR::import.bw.filt(bw.file = file.path(root.dir,"processed_data/HK5M2BBXY/bwa/mergedReplicate/bigwig/control.mRp.clN.bigWig"),
gr.dat = ENCODE_broadPeaks)
# Switch formats
suppressWarnings(GenomeInfoDb::seqlevelsStyle(ENCODE_broadPeaks) <- "NCBI")
CT.bw_filt <- echolocatoR::import.bw.filt(bw.file = file.path(root.dir,"processed_data/HK5M2BBXY/bwa/mergedReplicate/bigwig/control.mRp.clN.bigWig"),
gr.dat = ENCODE_broadPeaks)
CT.bw_filt
peaks_dir <- "processed_data/HK5M2BBXY/bwa/mergedReplicate/macs/narrowPeak"
# Narrow peaks
CT_narrowPeaks <- data.table::fread(file.path(root.dir,peaks_dir,"control.mRp.clN_peaks.annotatePeaks.txt")) %>%
dplyr::mutate(peak_score=`Peak Score`) %>%
GenomicRanges::makeGRangesFromDataFrame(seqnames.field = "Chr",
start.field = "Start", end.field = "End",strand.field = "Strand",
keep.extra.columns = T)
CT_narrowPeaks$width <- GenomicRanges::width(CT_narrowPeaks)
hits <- GenomicRanges::findOverlaps(query = gr.dat, subject = CT_narrowPeaks)
CT_narrowPeaks_filt <- CT_narrowPeaks[S4Vectors::subjectHits(hits)]
summary(CT_narrowPeaks$width)
CT_summits
peaks_dir <- "processed_data/HK5M2BBXY/bwa/mergedReplicate/macs/narrowPeak"
root.dir <- "/rds/general/project/neurogenomics-lab/live/GitRepos/CUT_n_TAG"
knitr::opts_chunk$set(echo = T, root.dir = root.dir)
knitr::opts_knit$set(
root.dir = root.dir
)
setwd(root.dir)
# source(file.path(root.dir,"scripts/functions.R"))
library(dplyr)
library(ggbio) # BiocManager::install("ggbio")
file_names <- echolocatoR::GITHUB.list_files(creator = "RajLabMSSM",
repo = "Fine_Mapping_Shiny",
query = "*Nalls23andMe_2019.*BST1.UKB.multi_finemap.csv.gz")
gr.dat <- GenomicRanges::makeGRangesFromDataFrame(data.table::fread(file_names),
keep.extra.columns = T,
seqnames.field = "CHR",
start.field = "POS",
end.field = "POS")
# ! IMPORTANT !: Needs to be in same chromosome format as bigwig in order to query!
suppressWarnings(GenomeInfoDb::seqlevelsStyle(gr.dat) <- "NCBI")
ENCODE.broadPeaks <- data.table::fread("http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneK562H3k27acStdPk.broadPeak.gz", nThread=4,
col.names = c("seqnames","start","end","name","score",
"strand","signalValue","neglog_pValue","neglog_qValue")) %>%
GenomicRanges::makeGRangesFromDataFrame(keep.extra.columns = T)
ENCODE.bw_filt <- echolocatoR::import.bw.filt(bw.file = "http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneK562H3k27acStdSig.bigWig",
gr.dat = ENCODE.broadPeaks)
# Switch formats
suppressWarnings(GenomeInfoDb::seqlevelsStyle(ENCODE_broadPeaks) <- "NCBI")
# Switch formats
suppressWarnings(GenomeInfoDb::seqlevelsStyle(ENCODE.broadPeaks) <- "NCBI")
CT.bw_filt <- echolocatoR::import.bw.filt(bw.file = file.path(root.dir,"processed_data/HK5M2BBXY/bwa/mergedReplicate/bigwig/control.mRp.clN.bigWig"),
gr.dat = ENCODE.broadPeaks)
peaks_dir <- "processed_data/HK5M2BBXY/bwa/mergedReplicate/macs/narrowPeak"
# Narrow peaks
CT.narrowPeaks <- data.table::fread(file.path(root.dir,peaks_dir,"control.mRp.clN_peaks.annotatePeaks.txt")) %>%
dplyr::mutate(peak_score=`Peak Score`) %>%
GenomicRanges::makeGRangesFromDataFrame(seqnames.field = "Chr",
start.field = "Start", end.field = "End",strand.field = "Strand",
keep.extra.columns = T)
CT_narrowPeaks$width <- GenomicRanges::width(CT.narrowPeaks)
CT_narrowPeaks$width <- GenomicRanges::width(CT.narrowPeaks)
CT.narrowPeaks$width <- GenomicRanges::width(CT.narrowPeaks)
hits <- GenomicRanges::findOverlaps(query = gr.dat, subject = CT.narrowPeaks)
summary(CT.narrowPeaks$width)
CT.summits <- data.table::fread(file.path(root.dir,peaks_dir,"control.mRp.clN_summits.bed"),
col.names = c("seqnames","start","end","peak_id","summit_height")) %>%
GenomicRanges::makeGRangesFromDataFrame(keep.extra.columns = T)
CT.summits$width <- GenomicRanges::width(CT.summits)
summary(CT.summits$width)
ENCODE.bw_filt$score
ENCODE.bw_filt
length(ENCODE.bw_filt)
length(CT.bw_filt)
# order the peaks by qvalue, and take top 250 peaks
CT.narrowPeaks = CT.narrowPeaks[order(CT.narrowPeaks$qvalue)]
# Narrow peaks
CT.annotatePeaks <- data.table::fread(file.path(root.dir,peaks_dir,"control.mRp.clN_peaks.annotatePeaks.txt")) %>%
dplyr::mutate(peak_score=`Peak Score`) %>%
GenomicRanges::makeGRangesFromDataFrame(seqnames.field = "Chr",
start.field = "Start", end.field = "End",strand.field = "Strand",
keep.extra.columns = T)
